/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (k <= 1 || !head) {
          return head;
        }

        ListNode *current = head, *previous = nullptr;
        while (true) {
          ListNode *lastNodeOfPreviousPart = previous;
          // after reversing the LinkedList 'current' will become the last node of the sub-list
          ListNode *lastNodeOfSubList = current;
          ListNode *next = nullptr;  // will be used to temporarily store the next node
          // reverse 'k' nodes
          if (len(current) < k)  break;
          for (int i = 0; current != nullptr && i < k; i++) {
            next = current->next;
            current->next = previous;
            previous = current;
            current = next;
          }

          // connect with the previous part
          if (lastNodeOfPreviousPart != nullptr) {
            lastNodeOfPreviousPart->next = previous;  // 'previous' is now the first node of the sub-list
          } else {         // this means we are changing the first node (head) of the LinkedList
            head = previous;
          }

          // connect with the next part
          lastNodeOfSubList->next = current;

          if (!current) {  // break, if we've reached the end of the LinkedList
            break;
          }
          // prepare for the next sub-list
          previous = lastNodeOfSubList;
        }

        return head;
        
    }
    
    int len(ListNode* ptr){
        int ret = 0;
        while(ptr != NULL)
            ptr = ptr -> next, ret++;
        return ret;
    }
};
