/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if (!head  || !head->next) {
          return;
        }

        // find the middle of the LinkedList
        ListNode *slow = head, *fast = head;
        while (fast != nullptr && fast->next != nullptr) {
          slow = slow->next;
          fast = fast->next->next;
        }

        // slow is now pointing to the middle node
        ListNode *headSecondHalf = reverse(slow);  // reverse the second half
        ListNode *headFirstHalf = head;

        // rearrange to produce the LinkedList in the required order
        while (headFirstHalf  && headSecondHalf) {
          ListNode *temp = headFirstHalf->next;
          headFirstHalf->next = headSecondHalf;
          headFirstHalf = temp;

          temp = headSecondHalf->next;
          headSecondHalf->next = headFirstHalf;
          headSecondHalf = temp;
        }

        // set the next of the last node to 'null'
        if (headFirstHalf) {
          headFirstHalf->next = nullptr;
        }
  }

 private:
  static ListNode *reverse(ListNode *head) {
    ListNode *prev = nullptr;
    while (head != nullptr) {
      ListNode *next = head->next;
      head->next = prev;
      prev = head;
      head = next;
    }
    return prev;
  }
        
    
};
