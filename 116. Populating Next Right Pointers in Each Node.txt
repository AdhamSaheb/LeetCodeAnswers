/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        vector<Node*> level ;
        queue<Node *> q; 
        if(!root) return root ;
        int currLevel =1 , nextLevel =0 ;
        q.push(root) ;
        while(q.size()) {
            Node* front = q.front() ;
            q.pop() ;
            level.push_back(front);
            if(front->left) {
                nextLevel ++ ;
                q.push(front->left);
            }
            if(front->right){
                nextLevel ++ ;
                q.push(front->right);                
            }
            currLevel -- ;
            if(!currLevel) {
                swap(currLevel , nextLevel); 
                //opearte on the level 
                for(int i=1 ;i<level.size() ; i++) level[i-1]->next = level[i];
                level[level.size() -1 ]->next = NULL; 
                level = {} ; 
            }
        }
        return root; 
    }
};
