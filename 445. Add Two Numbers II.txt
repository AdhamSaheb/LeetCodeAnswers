/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *ans = new ListNode(0) , *ptr = ans ;
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        int carry =0, sum = 0;
        while(l1 or l2){
            int val1 = (l1) ? l1->val : 0 ;
            int val2 = (l2) ? l2->val : 0 ;
            sum = (val1 + val2 + carry) % 10;
            carry = (val1 + val2+ carry) / 10;
            ptr->next = new ListNode(sum);
            ptr = ptr->next; 
            l1 = (l1) ? l1->next : NULL ; 
            l2 = (l2) ? l2->next : NULL ;
        }
        if(carry) ptr->next = new ListNode(carry);
        return reverseList(ans->next) ;
    }
    
    ListNode* reverseList(ListNode *head){
        ListNode *prev = NULL , *curr = head, *next; 
        while(curr) {
            next = curr->next ;
            curr->next = prev ; 
            prev = curr ;
            curr = next ;
        }
        return prev;
    }
};
