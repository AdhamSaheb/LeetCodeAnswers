class Solution {
public:
    
    struct numCompare {
        bool operator()(const pair<int, int> &x, const pair<int, int> &y) {
            if(x.first == y.first) return x > y;
            return x.first > y.first;
        }
    };
    
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        
        int index = binarySearch(arr, x);
        int low = index - k, high = index + k;
        low = max(low, 0);                      // 'low' should not be less than zero
        high = min(high, (int)arr.size() - 1);  // 'high' should not be greater the size of the array
        priority_queue<pair<int, int>, vector<pair<int, int>>, numCompare> minHeap;
        // add all candidate elements to the min heap, sorted by their absolute difference from 'X'
        for (int i = low; i <= high; i++) {
          minHeap.push(make_pair(abs(arr[i] - x), i));
        }

        // we need the top 'K' elements having smallest difference from 'X'
        vector<int> result;
        for (int i = 0; i < k; i++) {
          result.push_back(arr[minHeap.top().second]);
          minHeap.pop();
        }
        sort(result.begin(), result.end());
        return result;
    }
    
private:
  int binarySearch(const vector<int> &arr, int target) {
    int low = 0;
    int high = arr.size() - 1;
    while (low <= high) {
      int mid = low + (high - low) / 2;
      if (arr[mid] == target) {
        return mid;
      }
      if (arr[mid] < target) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    if (low > 0) {
      return low - 1;
    }
    return low;
  }
};
