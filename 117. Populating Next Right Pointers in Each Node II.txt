/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root; 
        int currLevel=1 , nextLevel=0 ;
        Node *front,*prev=nullptr;
        queue<Node*> q ;
        q.push(root);
        while(q.size()){
            front = q.front(); q.pop();
            currLevel -- ;
            /*operate*/
            if(prev){
                prev->next = front;
            }
            prev = front; 
            
            if(front->left){
                q.push(front->left);
                nextLevel++;
            }
            if(front->right){
                q.push(front->right);
                nextLevel++;
            }
            if(!currLevel){
                swap(currLevel,nextLevel);
                prev = nullptr; 
            }
        }
        return root ;
        
    }
};
