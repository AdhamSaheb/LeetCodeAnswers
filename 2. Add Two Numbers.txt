/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
import java.lang.Math; 

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int num1=0 , num2 =0 ; 
        ListNode ptr1= l1 ;
        ListNode ptr2= l2 ;
        ListNode finalAnswer =new ListNode() ;
        //this will be a pointer to the answer list 
        ListNode answerptr = finalAnswer ; 
        
        int i = 0, remainder =0 , summation =0 ; 
        while (ptr1 != null || ptr2 !=null ) {
            
            int tempNum1=0 ,tempNum2 = 0 ; 
            if (ptr1 != null) tempNum1  = ptr1.val; 
            if (ptr2 != null) tempNum2  = ptr2.val; 
           
            //summation+=  (((tempNum1 + tempNum2)%10)+remainder)* Math.pow(10,i); 
            
            //add to answerList   
            answerptr.next =
                new ListNode ( (tempNum1 + tempNum2 + remainder )%10 );            
            remainder = (tempNum1 + tempNum2+remainder)/10;
            answerptr=answerptr.next; 

            if(ptr1 != null) ptr1 = ptr1.next ;
            if(ptr2 != null) ptr2 = ptr2.next ;

            i++ ;
        }
        if(remainder != 0 ){
            answerptr.next = new ListNode(remainder);
        }
        //its really important to return next because this will always have a 0 in the beginning
        return finalAnswer.next; 
        
    }
}