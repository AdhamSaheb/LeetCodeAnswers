class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int ans = 0 ;
        queue<pair<int,int>> q ; 
        // Push all rotten oranges into a queue
        for(int row = 0 ; row< grid.size() ; row ++ ) {
            for(int col = 0 ; col < grid[0].size();col ++) {
                if(grid[row][col] == 2){
                    // rotten
                    q.push({row,col});
                }
            }
        }
        // rotten all the oranges starting from the initial rotten oranges in the queue 
        bfs(q,grid,ans);
        // check if any oranges are not rotten
        for(int row = 0 ; row< grid.size() ; row ++ ) {
            for(int col = 0 ; col < grid[0].size();col ++) {
                if(grid[row][col] == 1) return -1 ;
            }
        }
        return ans ;
    }
    
    void bfs( queue<pair<int,int>> &q ,vector<vector<int>>& grid, int &ans) {
        int currLevel = q.size() , nextLevel = 0, minutes = -1 ;
        int dx[4] = {1,-1,0,0};
        int dy[4] = {0,0,1,-1};
        int row, col ;
        while(q.size()){
            pair<int,int> front = q.front(); q.pop();
            currLevel -- ;
            row = front.first ; col = front.second;
            for(int i = 0 ; i < 4 ; i ++){
                int toRow = row + dx[i] ;
                int toCol = col + dy[i] ;
                if(check(toRow, toCol, grid) and grid[toRow][toCol] == 1) { 
                    // fresh neighbor 
                    grid[toRow][toCol] = 3 ; // mark as rotten and visited 
                    nextLevel ++ ;
                    q.push({toRow,toCol});
                }
            }
            if(!currLevel){
                minutes ++ ;
                swap(currLevel,nextLevel);
            }
        }
        ans = max(ans,minutes);
    }
    
    
    bool check(int row ,int col , vector<vector<int>> &grid){
        return (row >=0 and row < grid.size() and col >=0 and col < grid[0].size());
    }
};
