class MinStack {
    private:
        stack<int> s1;    
        stack<int> s2;   //for containing min value at top 
    public:
        void push(int x) {
            s1.push(x);
            if(s2.empty() || x<=s2.top()) s2.push(x);	    
        }
        void pop() {
            if(s1.top()==s2.top()) s2.pop();
            s1.pop();
        }
        int top() {
            return s1.top();
        }
        int getMin() {
            return s2.top();
        }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */






class MinStack {
    private:
        stack<int> s;    
        int min = INT_MAX ;  
    public:
        void push(int x) {
            if(x <= min) {
                s.push(min); // push the second min value right after the new min value 
                min = x ; 
            }
            s.push(x);
        }
        void pop() {
            if(s.top() == min) {
                s.pop() ;
                //now the top is the second min value 
                min = s.top();
            }
            s.pop() ;
        }
        int top() {
            return s.top();
        }
        int getMin() {
            return min ;
        }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
