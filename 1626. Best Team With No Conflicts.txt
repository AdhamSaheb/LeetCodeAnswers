class Solution {
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        // Finding the longest non decreasing sub sequence
        vector<pair<int,int>> v;
        for(int i=0;i<ages.size();i++){
            v.push_back({ages[i],scores[i]});
        }
        sort(v.begin(),v.end());
        int n=v.size();
        int dp[n + 1];
        int ans=INT_MIN;
        for(int i=0;i<n;i++){ // by default , dp values start with original values 
              dp[i]=v[i].second;
              ans=max(ans,dp[i]);
        } 
        for(int i=1;i<n;i++){ // for each value, check if I can extend any of the previous sub sequences 
            for(int j=0;j<i;j++){
                if(v[i].second>=v[j].second and dp[j] + v[i].second>dp[i]){
                        dp[i]=dp[j] + v[i].second;
                        ans=max(ans,dp[i]);
                }
            }
        }
        return ans;
    }
};

// https://www.youtube.com/watch?v=fV-TF4OvZpk&ab_channel=BackToBackSWE
/*
sort ages .... 
[1,1,2,2]
[5,5,4,6] => ans = 10
*/

