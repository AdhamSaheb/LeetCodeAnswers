/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string smallest = "zzzzzzzzzz" ;
    string smallestFromLeaf(TreeNode* root) {
        string current = "" ;
        helper(root,current);
        return smallest ;
    }
    
    void helper(TreeNode *root, string current){
        if(!root) return ;
        current = (char)(root->val + 'a') + current ; //Just so that i dont have to reverse 
        if(!root->left && !root->right){
            if( smaller(current,smallest) ) smallest = current ;
            return ; 
        }
        helper(root->left,current) ;
        helper(root->right,current) ;
    }
    
    bool smaller(string s1 ,string s2) {
        for(int i = 0 ; i<min( s1.size() , s2.size() ) ; i++ ) {
            if(s1[i]  < s2[i]  ) return 1 ;
            if(s1[i]  > s2[i]  ) return 0 ;
        }
        return s1.size() < s2.size() ;
    }
};
 
