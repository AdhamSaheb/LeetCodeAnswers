/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return dfs(nums,0,nums.size());
    }
    
    // low/high represent indecies
    TreeNode* dfs(vector<int> nums, int low, int high) {
        if(low == high or high > nums.size() or low < 0) return nullptr; 
        int maxIndex = low ;
        int maxNumber = INT_MIN;
        for(int i = low ; i < high; ++i ) {
            if(nums[i] > maxNumber)  {
                maxIndex = i ;
                maxNumber = nums[i];
            }   
        }
        TreeNode *root = new TreeNode(nums[maxIndex]);
        root->right= dfs(nums,maxIndex+1,high);
        root->left = dfs(nums,low,maxIndex);
        return root; 
    }
};
