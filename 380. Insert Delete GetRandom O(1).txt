class RandomizedSet {
public:
    /** Initialize your data structure here. */
    vector<int> nums ; 
    unordered_map<int,bool> mp; 
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(mp[val]) return false ;
        mp[val] = 1 ;
        nums.push_back(val);
        return true ;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(mp[val]) {
            mp[val] = 0 ;
            nums.erase(std::remove(nums.begin(), nums.end(), val), nums.end());
            return true ;
        }
        return false ;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int index = rand() % nums.size() ;
        return nums[index]; 

    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
