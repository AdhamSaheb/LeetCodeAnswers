


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
	ListNode* midNode(ListNode*head,ListNode*tail){
        if(head==tail){
            return NULL;
        }
        ListNode*slow=head,*fast=head;

        while(fast!=tail and fast->next!=tail){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow; 
    }

    TreeNode*buildBST(ListNode*start,ListNode*end){
        //Base case :
        if(start==end){
            return NULL;
        }
        //get the middle node of LL
        ListNode*mid=midNode(start,end);

        TreeNode*root=new TreeNode(mid->val,NULL,NULL);
        root->left=buildBST(start,mid);
        root->right=buildBST(mid->next,end);

        return root;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        //build left and right subtree
        return buildBST(head,NULL);
    }
};
