/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        string path = "";
        // find lca 
        TreeNode *lca = findLca(root,startValue,destValue);
        if(!lca) return path;
        
        // find path to start from lca 
        string tempPath = "" ;
        string toStart = findPath(lca,startValue,tempPath);
        path += string(toStart.size(),'U');
        
        
        tempPath = "";
        // find path to destValue from lca 
        string toDest = findPath(lca,destValue,tempPath);
        path += toDest ;

        return path;
    }
    
    TreeNode *findLca(TreeNode *root, int start, int dest){
        if(!root) return root ;
        // stop case 
        if(root ->val == start or root->val == dest) return root ;
        
        TreeNode *left = findLca(root->left,start,dest);
        TreeNode *right = findLca(root->right,start,dest);
        
        if(!left and !right ) return nullptr ;
        
        if(left and right ) return root ;
        
        if(!left) return right ;
        return left ;
        
    }
    
    
    string findPath(TreeNode *root, int dest, string &path ){
        if(!root) return "" ;
        if(root->val == dest ) return path ;
        
        // try left
        path += 'L';
        string left = findPath(root->left, dest, path);
        if(left.size()) return left ;
        path.pop_back();
        
        // otherwise, its on the right 
        path += 'R';
        string right = findPath(root->right, dest, path );
        if(right.size()) return right ;
        path.pop_back();
        
        return "" ; 
    }
};
