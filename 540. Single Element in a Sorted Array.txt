class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        if(nums.size()==1) return nums[0];
        int l=0, r=nums.size()-1, mid, indexToCheck;
        while(l < r){
            mid = l+(r-l)/2;
            indexToCheck = (mid%2 == 0) ? mid+1 : mid-1;
            if(nums[mid]==nums[indexToCheck]) l = mid+1;
            else r = mid;
        }
        return nums[l];
    }
};
/*

pattern is even odd even odd ... for all twins of numbers
check middle, if middle is even, then the next has to be equal, if not, then left pattern is broken, go left 
if middle is odd, check prev element, if not = middle, right is broken , go right 
*/
