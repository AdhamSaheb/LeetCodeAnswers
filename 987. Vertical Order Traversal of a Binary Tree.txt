/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // heap content <value,order,depth>
    struct Comparator{
        bool operator() (vector<int> a , vector<int>  b) {
            if(a[1] != b[1]) return a[1] > b[1];
            if(a[2] != b[2]) return a[2] > b[2];
            return a[0] > b[0];
        }  
    };
    priority_queue<vector<int>, vector<vector<int>>,Comparator> minHeap;
    vector<vector<int>> ans ; 
    
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        traverse(root,{root->val,0,0});
        // previous column order 
        int prevOrder = minHeap.top()[1] ;
        vector<int> current ;
        while(minHeap.size()) {
            auto node = minHeap.top(); minHeap.pop();
            // cout << node[0] << " " << node[1] << " "  << node[2] << endl; 
            if(node[1] == prevOrder) {
                current.push_back(node[0]);
            }else {
                ans.push_back(current);
                current = {node[0]}; 
                prevOrder = node[1];
            }
        }
        if(current.size()) ans.push_back(current);
        return ans;
    }
    
    void traverse(TreeNode* root ,vector<int> node) {
        minHeap.push(node);
        if(root->right) traverse(root->right, {root->right->val,node[1] +1, node[2]+1});
        if(root->left) traverse(root->left, {root->left->val,node[1] - 1, node[2]+1});
    }
};
