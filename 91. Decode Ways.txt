// class Solution {
// public:
//     int numDecodings(string s) {
//         return s.empty() ? 0: numDecodings(0,s);    
//     }
//     int numDecodings(int p, string& s) {
//         int n = s.size();
//         if(p == n) return 1;
//         if(s[p] == '0') return 0; // sub string starting with 0 is not a valid encoding
//         int res = numDecodings(p+1,s);
//         if( p < n-1 && (s[p]=='1'|| (s[p]=='2'&& s[p+1]<'7'))) res += numDecodings(p+2,s);
//         return res ;
//     }
// };



/*Dp*/

class Solution {
    
public:
int numDecodings(string s) {
    int n = s.size(); 
    vector<int> dp(n+1);
    dp[n] = 1; // last character only one possbile decode 
    for(int i=n-1;i>=0;i--) {
        if(s[i]=='0') dp[i]=0; 
        else {
            dp[i] = dp[i+1];
            if(i<n-1 && (s[i]=='1'||s[i]=='2'&&s[i+1]<'7')) dp[i]+=dp[i+2];
        }
    }
    return s.empty()? 0 : dp[0];   
}
};
