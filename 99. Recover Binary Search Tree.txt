/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *first, *second, *prev= new TreeNode(INT_MIN) ;
    void recoverTree(TreeNode* root) {
        /*in order to find the two nodes the need to be swapped, we can do in order traversal and check the place of each number in its traversal*/
        traverse(root);
        // Swap the values of the two nodes
        swap(first->val,second->val);

    }
    
    /*6 3 4 5 2*/
    void traverse(TreeNode *root) {
        if (!root)
            return;  
        traverse(root->left);
        if (!first  && prev->val > root->val) {
            first = prev; // 6 in my example 
        }
        if (first && prev->val > root->val) {
            second = root; // the smaller element , 2 in my example
        }        
        prev = root;
        traverse(root->right);
    }
};
