/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> ans ; 
    vector<string> binaryTreePaths(TreeNode* root) {
        if(!root->left && !root->right) {
            ans.push_back(to_string(root->val)); 
            return ans ;
        }
        if(root->right) dfs(root->right,to_string(root->val));
        if(root->left) dfs(root->left,to_string(root->val));
        return ans ; 
    }
    void dfs(TreeNode* root , string s){
        s = s+"->" + to_string(root->val);
        if(!root->left && !root->right) ans.push_back(s);
        if(root->left ) dfs(root->left ,s);
        if(root->right) dfs(root->right ,s);
        
    }
};
