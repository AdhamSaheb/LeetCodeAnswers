// NOT ACCEPTED !! 

class Solution {
public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int n = nums.size() ; 
        //final answer summation 
        int ans =0 ;
        // Sliding window with size >=0 and <size 
        for (int i=k ; i<n ; i++ ) {
            int low =0 , high = low +i ; 
            // if size of sub array is less than k its not an option
            if ( (high - low +1 ) < k ) continue; 
            //slide for size-1 - high
            int tempHigh = high ;
            //cout << ( (n -1 ) - tempHigh )  << endl ;
            for (int j =0 ; j<= ( (n -1 ) - tempHigh ) ; j ++) {
                // check sub array odds 
                int odds =0 ;
                 for (int index = low ; index <= high ; index ++)  if (nums[index] %2 == 1 ) odds ++ ; 
                if (odds == k)  {
                    ans ++ ; 
                    low ++ ;
                    high ++ ;
                }

                //I will slide the window with number of steps equal to the remeinder of k , ex. if if I found 1 odd and need 3, I have                 to slide at least 2 to find a nice subarray 
                else {
                    low += ( low + (k-odds) >=n) ? 1 : k-odds ; 
                    high +=  ( high + (k-odds) >=n) ? 1 : k-odds  ;                    
                }

            }
        }
    return ans ;

        }   
        
    
};