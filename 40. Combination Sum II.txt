class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> combination;
        // sort input 
        sort(candidates.begin(),candidates.end());
        helper(candidates,target,ans,0,0,combination);
        return ans ;
    }
    
    void helper(vector<int> candidates,int target,vector<vector<int>> &ans , int sum, int index, vector<int> currentComb){
        // invalid
        if(sum > target) return ;
        // goal
        if(sum == target){
            ans.push_back(currentComb);
            return;
        }
        // loop and backtrack
        for(int i = index ; i < candidates.size() ; i++ ) {
            if(i > index and candidates[i] == candidates[i -1]) continue ;
            int num = candidates[i];
            sum += num ;
            currentComb.push_back(num);
            // remove from map
            helper(candidates,target,ans,sum,i + 1,currentComb);
            sum -= num ;
            currentComb.pop_back();
        }
        
    }
};

