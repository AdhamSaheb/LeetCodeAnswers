class Solution {
public:
    int longestOnes(vector<int>& arr, int k) {
        int windowStart = 0, maxLength = 0, maxOnesCount = 0;
        // try to extend the range [windowStart, windowEnd]
        for (int windowEnd = 0; windowEnd < arr.size(); windowEnd++) {
          if (arr[windowEnd]) {
            maxOnesCount++;
          }
          // current window size is from windowStart to windowEnd, overall we have a maximum of 1s
          // repeating a maximum of 'maxOnesCount' times, this means that we can have a window with
          // 'maxOnesCount' 1s and the remaining are 0s which should replace with 1s.
          // now, if the remaining 0s are more than 'k', it is the time to shrink the window as we
          // are not allowed to replace more than 'k' Os
          if (windowEnd - windowStart + 1 - maxOnesCount > k) {
            if (arr[windowStart]) {
              maxOnesCount--;
            }
            windowStart++;
          }
          maxLength = max(maxLength, windowEnd - windowStart + 1);
        }

        return maxLength;
    }
};
