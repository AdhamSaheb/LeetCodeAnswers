/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
          if(!root) return 0 ;
        vector<int> numbers ; 
        dfs(root , numbers);
        sort(numbers.begin(),numbers.end());
        int min = numbers[numbers.size() -1] - numbers[numbers.size() -2];
        for ( int i= numbers.size() -2 ; i >0 ; i--) {
            if(numbers[i]- numbers[i-1] < min) min= numbers[i]- numbers[i-1] ;
            
        }
        return min ;
    }
    void dfs(TreeNode* root , vector<int> &numbers){
        if(!root) return ;
        else numbers.push_back(root->val);
        dfs(root->right , numbers);
        dfs(root->left , numbers);
    }
};
