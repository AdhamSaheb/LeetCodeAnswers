class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,INT_MAX));
        vector<int>dx= {0,1};
        vector<int>dy= {1,0};
        queue<pair<int,int>>q1;
        dp[0][0] = grid[0][0];
        q1.push({0,0});

        while(!q1.empty())
        {
            pair<int,int>current=q1.front(); q1.pop();
            int cx = current.first;
            int cy = current.second;
            for(int i = 0;i<2;i++)
            {
                int nx = cx+dx[i];
                int ny = cy+dy[i];
                if(nx>=0 and ny>=0 and nx<m and ny<n and dp[cx][cy]+grid[nx][ny]<dp[nx][ny])
                {
                    dp[nx][ny] = dp[cx][cy] + grid[nx][ny];
                    q1.push({nx,ny});
                }
            }
        }
        return dp[m-1][n-1];
    }
};
