/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    int index = 0 ; 
    vector<int> nums ;
    NestedIterator(vector<NestedInteger> &nestedList) {
        for(auto num : nestedList){
            getNestedInteger(num,this->nums);
        }
    }
    
    int next() {
        if(this->hasNext()) {
            return nums[this->index ++ ] ;
        }
        else return -1 ; 
    }
    
    bool hasNext() {
        return index < nums.size() ;
    }
    
    void getNestedInteger(NestedInteger integer, vector<int> &nums){
        if(integer.isInteger()){
            nums.push_back(integer.getInteger());
        }else {
            for(auto num : integer.getList()) {
                getNestedInteger(num,nums);
            }
        }
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
