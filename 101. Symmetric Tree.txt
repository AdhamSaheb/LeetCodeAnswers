/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public: 
    bool isPalindrome(vector<int> &nums) { 
        int i = 0; 
        int j = nums.size()-1;
        while(i < j) { 
            if(nums[i] != nums[j]) { 
                return false;
            }  
            i++; 
            j--;
        } 
        return true;
    }
    bool isSymmetric(TreeNode* root) {  
        if(root == NULL || (root->left == NULL && root->right == NULL)) { 
            return true;
        } 
        queue<TreeNode *> q; 
        q.push(root); 
        while(!q.empty()) {  
             vector<int> auxiliary; 
             int n = q.size(); 
             for(int i = 0; i < n; i++) { // loop the level , push values of level in auxilary, and check if auxilary is palindrome
                if(q.front()){ 
                    q.push(q.front()->left); 
                    q.push(q.front()->right);   
                    auxiliary.push_back(q.front()->val);
                }
                //a null node 
                else{ 
                    auxiliary.push_back(-1);
                }
                //node finished 
                q.pop();  
                 
             }
             if(!isPalindrome(auxiliary)) { 
                return false;
             }
        }
        return true;
    }
};

//BFS WITH PALINDROME CHECK 





//dfs
bool isSymmetric(TreeNode* root) {
        return helper(root,root);
    }
    
    bool helper(TreeNode* node1, TreeNode* node2){
        if(node1 == nullptr && node2 == nullptr)
            return true;
        if(node1 == nullptr || node2 == nullptr)
            return false;
        if(node1 -> val != node2 -> val)
            return false;
        return helper(node1 -> left, node2 -> right) && helper(node1 -> right, node2 -> left);
        
    }
