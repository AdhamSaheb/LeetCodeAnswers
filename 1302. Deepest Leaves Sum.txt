/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        /*level traverse using bfs, sum last level nodes, return level summation if no next level*/
        queue<TreeNode*> q ; q.push(root);
        int currLevel = 1 , nextLevel = 0 ;
        int levelSum  = 0; 
        while(currLevel){
            TreeNode *front = q.front(); q.pop();
            --currLevel ;
            levelSum += front->val;
            if(front->left) {
                nextLevel ++ ;
                q.push(front->left);
            }
            if(front->right) {
                nextLevel ++ ;
                q.push(front->right);
            }
            /*check if current level is done*/
            if(!currLevel){
                /*check if no next level*/
                if(!nextLevel) return levelSum ;
                levelSum = 0;
                swap(currLevel,nextLevel);
            }
        }
        return 0 ;
    }
};
