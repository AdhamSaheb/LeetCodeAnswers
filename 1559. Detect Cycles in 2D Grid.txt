class Solution {
public:
    using mySet = set<pair<int,int>> ;
    bool containsCycle(vector<vector<char>>& grid) {
        mySet visited ;
        for(int row = 0 ; row < grid.size() ; row ++) {
            for(int col = 0 ; col < grid[0].size() ; col ++) {
                if(!visited.count({row,col}) ) {
                    if(dfs(row,col,visited,grid,-1,-1)) return true;
                }
            }
        }
        return false ;
    }
    
    bool dfs(int row, int col, mySet &visited, vector<vector<char>>& grid, int px, int py ) {
        // px : prevx , py : prevY
        if(visited.count({row,col})) return true; 
        visited.insert({row,col});
        int dx[4]= {1,-1,0,0};
        int dy[4]= {0,0,1,-1};
        for(int i = 0; i<4;i++ ) {
            int toRow = row + dx[i];
            int toCol = col + dy[i];
            if(check(toRow,toCol,grid) and grid[toRow][toCol] == grid[row][col] and (toRow != px or toCol!=py)){
                if(dfs(toRow,toCol,visited,grid,row,col)) return true ;
            }
        }
        return false ;
    }
    
    bool check(int x ,int y, vector<vector<char>>& grid ) {
        return (x >= 0 and x<grid.size() and y>=0 and y<grid[0].size() ) ;  
    }
};
