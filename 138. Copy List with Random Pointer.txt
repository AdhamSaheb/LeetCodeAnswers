/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return NULL;
        unordered_map<Node*,Node*> mp;
        Node* newHead = new Node(head->val);
        Node* ptr = newHead;
        mp[head] = newHead;
        while(head) {
            ptr->val = head->val;
            if(head->next&&mp.count(head->next)) {
                ptr->next = mp[head->next];
            }
            else {
                ptr->next = (head->next) ? new Node(head->next->val) : NULL;
                if(ptr->next) mp[head->next] = ptr->next;
            }
            
            if(head->random and mp.count(head->random)) {
                ptr->random = mp[head->random];
            }
            else{
                ptr->random = (head->random ) ? new Node(head->random->val) : NULL;
                if(ptr->random) mp[head->random] = ptr->random;
            }
            head = head->next;
            ptr = ptr->next;
        }
        
        return newHead;
    }
};
