class Solution {
public:
    bool binSearch(vector<int> &nums,int i,int j,int target){
        int m = (i+j)/2;
        if(nums[m]==target || nums[i]==target || nums[j]==target) return true;
        else if(j==i) return false;
        else if(nums[m]<target) return binSearch(nums,m+1,j,target);
        else return binSearch(nums,i,m,target);
    }
    
    bool search(vector<int>& nums, int target) {
        int i;
        if(nums.size()==1 && nums[0]==target) return true;
        else if(nums.size()==1 && nums[0]!=target) return false;
        // find the pivot 
        for(i=0;i<nums.size()-1;i++){
            if(nums[i+1]<nums[i]) break;
        }
        if(target>=nums[0] && target<=nums[i]) return binSearch(nums,0,i,target);
        else if(target<nums[i] && target<=nums[nums.size()-1]) return binSearch(nums,i,nums.size()-1,target);
        else return false;
    }
};
