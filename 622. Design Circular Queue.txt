class MyCircularQueue {
public:
    vector<int> nums ;
    int max ;
    MyCircularQueue(int k) {
        max = k;
    }
    bool enQueue(int value) {
        if(nums.size() == max) return 0 ;
        nums.push_back(value);
        return 1 ; 
    }
    
    bool deQueue() {
        if(!nums.size()) return 0 ;
        nums.erase(nums.begin());
        return 1 ;
    }
    
    int Front() {
        if(!nums.size()) return -1 ;
        return nums[0]  ;
    }
    
    int Rear() {
        if(!nums.size()) return -1 ;
        return nums.back() ;
    }
    
    bool isEmpty() {
        return !(nums.size()) ;
    }
    
    bool isFull() {
        return nums.size() == max ; 
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
